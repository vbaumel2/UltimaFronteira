@startuml
' Exemplo de detalhamento para uma classe (o mesmo padrão será seguido para todas)
' class NomeClasse {
'   - atributo1: Tipo
'   + metodo1(param: Tipo): Retorno
' }

' Pacote: jogo
package jogo {
  class Main {
    +start(stage: Stage): void
    +main(args: String[]): void
  }
  class Globals {
    - mainWindow: MainWindow
    +Alimentos: AlimentoBuilder
    +Bebidas: BebidaBuilder
    +Remedios: RemedioBuilder
    +Recursos: RecursoBuilder
    +Ferramentas: FerramentaBuilder
    +Armas: ArmaBuilder
    +EventosClimaticos: EventoClimaticoBuilder
    +EventosDoencas: EventoDoencaFerimentoBuilder
    +EventosExploracao: EventoExploracaoBuilder
    +EventosCriatura: EventoCriaturaBuilder
    +getMainWindow(): MainWindow
    +setMainWindow(mw: MainWindow): void
  }
}

' Pacote: jogo.ClassesDoJogo.ambientes
package "jogo.ClassesDoJogo.ambientes" {
  abstract class Ambiente {
    - nome: String
    - descricao: String
    # difficuldade: double
    - items: List<Item>
    - eventos: List<Evento>
    +getMinDiff(): double
    +getMaxDiff(): double
    +getPesoFome(): double
    +getPesoSede(): double
    +getNewItems(): List<Item>
    +getNewEventos(): List<Evento>
    +getItemsFromProbability(lista: Map<Item, Double>): List<Item>
    +getEventsFromProbability(lista: Map<Evento, Double>): List<Evento>
    +getNome(): String
    +isVisitado(): boolean
    +setVisitado(visitado: boolean): void
    +descrever(): void
    +explorar(jogador: Jogador, mapa: Mapa): void
    +addDifficuldade(valorDiff: double): void
    +addItems(listaItens: List<Item>): void
    +getAparencia(): String
    +getItems(): List<Item>
    +getDescricao(): String
    +addEvento(evento: Evento): void
    +removeEvento(evento: Evento): boolean
    +getEventos(): List<Evento>
  }
  class Caverna
  class Deserto
  class Floresta
  class Inicio
  class Lago
  class Montanha
  class Ruinas
}

' Pacote: jogo.ClassesDoJogo.eventos
package "jogo.ClassesDoJogo.eventos" {
  abstract class Evento {
    - nome: String
    - peso: double
    +getNome(): String
    +getPeso(): double
    +aplicarEvento(ambiente: Ambiente, jogador: Jogador, mapa: Mapa): void
  }
  class EventoClimatico {
    - duracao: int
    - difficuldade: double
    - dano: double
  }
  class EventoCriatura {
    - duracao: int
    - vida: double
    - dano: double
    - drop: Item
    - runnable: Runnable
    +getDrop(): Item
  }
  class EventoDescoberta {
    - items: List<Item>
  }
  class EventoDoencaFerimento {
    - duracao: int
    - dano: double
    - button: Button
  }
  class GerenciadorEventos {
    - mapa: Mapa
    +GerenciadorEventos(mapa: Mapa)
    -probabilidadeEventos(ambiente: Ambiente): double
    -escolherEvento(eventos: List<Evento>): Evento
    +tentarEventos(ambiente: Ambiente): void
  }
}

' Pacote: jogo.ClassesDoJogo.itens
package "jogo.ClassesDoJogo.itens" {
  abstract class Item {
    - inventario: Inventario
    - posicao: int
    - nome: String
    - peso: double
    - durabilidade: int
    +atualizarInventario(inventario: Inventario, posicao: int): void
    +selfDestruir(): void
    +setPosicao(posicao: int): void
    +getInventario(): Inventario
    +getPosicao(): int
    +getNome(): String
    +getPeso(): double
    +getDurabilidade(): int
    +getButtonActions(): Map<String, Runnable>
    +removeDurabilidade(usos: int): void
    +toString(): String
  }
  interface Usavel {
    +usar(): void
  }
  class Alimento {
    - valorFome: double
    +usar(): void
    +toString(): String
  }
  class Antidoto {
    +usar(): void
    +toString(): String
  }
  class Arma {
    - dano: double
    +isEquipado(): boolean
    +setEquipado(equipado: boolean): void
    +getDano(): double
    +toString(): String
  }
  class Bebida {
    - valorSede: double
    +usar(): void
    +toString(): String
  }
  class Ferramenta {
    +tipo: String
    - eficiencia: double
    +isEquipado(): boolean
    +setEquipado(equipado: boolean): void
    +usar(): void
    +toString(): String
  }
  class Material {
    +tipoFerramenta: String
    - tipoDeFerramentaRequirido: String
    +toString(): String
  }
  class Remedio {
    - valorCura: double
    +usar(): void
    +toString(): String
  }
}

' Pacote: jogo.ClassesDoJogo.builders.itemBuilders
package "jogo.ClassesDoJogo.builders.itemBuilders" {
  interface ItemBuilder {
    +criar(nome: String): Item
  }
  class AlimentoBuilder
  class ArmaBuilder
  class BebidaBuilder
  class FerramentaBuilder
  class RecursoBuilder
  class RemedioBuilder
}

' Pacote: jogo.ClassesDoJogo.builders.eventoBuilders
package "jogo.ClassesDoJogo.builders.eventoBuilders" {
  class EventoClimaticoBuilder
  class EventoCriaturaBuilder
  class EventoDoencaFerimentoBuilder
  class EventoExploracaoBuilder
}

' Pacote: jogo.ClassesDoJogo
package "jogo.ClassesDoJogo" {
  class Crafter {
    +craftFerramenta(nome: String): boolean
    +craftArma(nome: String): boolean
    +craftRecurso(nome: String): boolean
  }
  class Inventario {
    - jogador: Jogador
    - arrayItens: List<Item>
    - pesoMaximo: double
    - pesoAtual: double
    +adicionarItem(item: Item): boolean
    +removerItem(pos: int): boolean
    +listarItens(): void
    +procurarItensPorNome(nome: String, quantidade: int): List<Item>
    +procurarPorClasse(classe: Class<?>): Item
    +gerarCrafts(): void
    +getItem(pos: int): Item
    +getSize(): int
    +getPesoMaximo(): double
    +getPesoAtual(): double
  }
  class Jogador {
    - nome: String
    - vida: double
    - fome: double
    - sede: double
    - sanidade: double
    - visao: double
    - posX: int
    - posY: int
    - multiplicadorSobrevivencia: double
    - inventario: Inventario
    - ferramentaEquipada: Ferramenta
    - armaEquipada: Arma
    +exibirStatus(): void
    +addFome(valorFome: double): void
    +addFome(valor: double, mensagem: String): void
    +addSede(valorSede: double): void
    +addSede(valor: double, mensagem: String): void
    +addVida(valorVida: double): void
    +addVida(valor: double, mensagem: String): void
    +getPosX(): int
    +getPosY(): int
    +setPos(posX: int, posY: int): void
    +setFerramentaEquipada(ferramenta: Ferramenta): void
    +setArmaEquipada(arma: Arma): void
    +getFome(): double
    +getVisao(): double
    +getInventario(): Inventario
    +getFerramentaEquipada(): Ferramenta
    +getArmaEquipada(): Arma
  }
  class Mapa {
    - jogador: Jogador
    - mapManager: MapManager
    +gerenciadorEventos: GerenciadorEventos
    - runnables: List<Runnable>
    +getJogador(): Jogador
    +centrarJogador(jogador: Jogador): void
    +gerarMapa(): void
    +iniciarRodada(x: int, y: int): void
    +carregarAmbiente(): void
    +exibirMapa(x: int, y: int): void
    +getAmbienteAtual(): Ambiente
    +getMatrizAmbientes(): Ambiente[][]
    +addCappedRunnable(runLimit: int, task: Runnable, onEnd: Runnable): void
    +addRunnable(runnable: Runnable): void
    +removeRunnable(runnable: Runnable): boolean
    +getPesoSede(): double
    +getPesoFome(): double
  }
}

' Pacote: jogo.ClassesDaInterface.janelaPrincipal
package "jogo.ClassesDaInterface.janelaPrincipal" {
  class CraftManager {
    - crafter: Crafter
    +gerarCrafts(): void
  }
  class InventoryManager {
    - inventario: Inventario
    +adicionarItem(item: Item): void
    +removerItem(item: Item): void
  }
  class MainWindow {
    - mapa: Mapa
    - jogador: Jogador
    - currentPane: Pane
    - mainPane: AnchorPane
    - craftPane: AnchorPane
    - selectPane: AnchorPane
    - caixaInventario: VBox
    - scroll_inv: ScrollPane
    - caixaAmbienteItens: VBox
    - caixaAcoes: VBox
    - caixaCraftFerramentas: VBox
    - caixaCraftArmas: VBox
    - caixaCraftRecursos: VBox
    - caixaTextos: VBox
    - gridMap: GridPane
    - textoVida: Text
    - textoSede: Text
    - textoFome: Text
    - textoInventario: Text
    - textoFerramenta: Text
    - textoArma: Text
    - textoRodada: Text
    - botaoMedico: Button
    - popup: Node
    +setPopup(newPop: Node): void
    +makeOptionsPopup(actions: Map<String, Runnable>, mouseEvent: MouseEvent): void
    +addTexto(texto: String, backgroundColor: String): void
    +addTexto(texto: String): void
    +addAcao(texto: String, runnable: Runnable): Button
    +initialize(): void
  }
  class MapManager {
    - mapa: Mapa
    +gerarMapa(): void
    +exibirMapa(posX: int, posY: int): void
    +onAmbienteExplorado(ambiente: Ambiente): void
  }
}

' Pacote: jogo.ClassesDaInterface.janelaSecundaria
package "jogo.ClassesDaInterface.janelaSecundaria" {
  class vazioPorEnquanto
}

' Relações de herança e implementação
Caverna --|> Ambiente
Deserto --|> Ambiente
Floresta --|> Ambiente
Inicio --|> Ambiente
Lago --|> Ambiente
Montanha --|> Ambiente
Ruinas --|> Ambiente

EventoClimatico --|> Evento
EventoCriatura --|> Evento
EventoDescoberta --|> Evento
EventoDoencaFerimento --|> Evento

Alimento --|> Item
Antidoto --|> Item
Arma --|> Item
Bebida --|> Item
Ferramenta --|> Item
Material --|> Item
Remedio --|> Item
Alimento ..|> Usavel
Bebida ..|> Usavel
Remedio ..|> Usavel
Antidoto ..|> Usavel

AlimentoBuilder ..|> ItemBuilder
ArmaBuilder ..|> ItemBuilder
BebidaBuilder ..|> ItemBuilder
FerramentaBuilder ..|> ItemBuilder
RecursoBuilder ..|> ItemBuilder
RemedioBuilder ..|> ItemBuilder

' Relações principais entre classes
Jogador --> Inventario
Jogador --> Mapa
Mapa --> Ambiente
Crafter --> Inventario
Crafter --> Globals
MainWindow --> Globals : usa
MainWindow --> Mapa : possui
MainWindow --> Jogador : possui
Inventario --> InventoryManager : possui
Mapa --> MapManager : possui
Crafter --> CraftManager : possui

' Relações de uso dos builders em Globals
Globals --> AlimentoBuilder
Globals --> ArmaBuilder
Globals --> BebidaBuilder
Globals --> FerramentaBuilder
Globals --> RecursoBuilder
Globals --> RemedioBuilder
Globals --> EventoClimaticoBuilder
Globals --> EventoCriaturaBuilder
Globals --> EventoDoencaFerimentoBuilder
Globals --> EventoExploracaoBuilder

@enduml
